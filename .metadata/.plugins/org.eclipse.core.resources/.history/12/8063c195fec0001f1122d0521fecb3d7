package com.healthins.serviceimplemention;

	import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.healthins.dto.RelationDto;
import com.healthins.model.RegistrationModel;
import com.healthins.model.RelationModel;
import com.healthins.repo.HealthInsurenceRepository;
import com.healthins.repo.RelationRepository;
import com.healthins.serviceint.RelationService;

	@Service
	public class RelationServiceImplemention implements RelationService {

	    @Autowired
	    private RelationRepository repository;
	    
	    @Autowired
	    private HealthInsurenceRepository repo;
	    
	    @Override
	    public ResponseEntity<?> saveHealthIns(RelationDto relation) {
	        try {
	            // Check if a record with the given Customer ID already exists
//	            Optional<RelationModel> existingRelation = repository.findByCustomerId(relation.getCustomerId());

//	            if (existingRelation.isPresent()) {
//	                return ResponseEntity.status(HttpStatus.CONFLICT)
//	                        .body("Customer ID already exists.");
//	            }

	            // Create and populate the RelationModel
	            RelationModel relationModel = new RelationModel();
	            relationModel.setCustomerId(relation.getCustomerId());
	            relationModel.setRelationName(relation.getRelationName());
	            relationModel.setAgeOfTheRelation(relation.getAgeOfTheRelation());
	            relationModel.setRelationPersonName(relation.getRelationPersonName());

	            // Save the RelationModel to the repository
	            repository.save(relationModel);

	            return ResponseEntity.status(HttpStatus.CREATED)
	                    .body("Relation saved successfully.");
	        } catch (Exception e) {
	            // Log the exception and return a generic error message
	            e.printStackTrace();
	            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
	                    .body("An error occurred while saving the relation.");
	        }
	    }
	    @Override
	    public ResponseEntity<?> getAllRelations() {
	        try {
	            List<RelationModel> relations = repository.findAll();
	            if (relations.isEmpty()) {
	                return ResponseEntity.status(HttpStatus.NOT_FOUND).body("No relation data found.");
	            }
	            return ResponseEntity.status(HttpStatus.OK).body(relations);
	        } catch (Exception e) {
	            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
	                    .body("An error occurred while fetching relations: " + e.getMessage());
	        }
	    }
	    public ResponseEntity<?> checkCustomerDetails(String customerId) {
	        try {
	         
	            Optional<RegistrationModel> registrationData = repo.findByCustomerId(customerId);

	            if (registrationData.isPresent()) {
	                return ResponseEntity.status(HttpStatus.OK).body("Customer details found: " + registrationData.get());
	            } else {
	                return ResponseEntity.status(HttpStatus.NOT_FOUND).body("No customer details found for the given ID.");
	            }
	        } catch (Exception e) {
	            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
	                    .body("An error occurred while checking customer details: " + e.getMessage());
	        }
	    }
		@Override
		public ResponseEntity<?> checkCustomerDetails(RelationDto relation) {
			 try {
		         
		            Optional<RegistrationModel> registrationData = repo.findByCustomerId(relation.getCustomerId());

		            if (registrationData.isPresent()) {
		                return ResponseEntity.status(HttpStatus.OK).body(registrationData.get());
		            } else {
		                return ResponseEntity.status(HttpStatus.NOT_FOUND).body("No customer details found for the given ID.");
		            }
		        } catch (Exception e) {
		            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
		                    .body("An error occurred while checking customer details: " + e.getMessage());
		        }
		}
	}
	

		


